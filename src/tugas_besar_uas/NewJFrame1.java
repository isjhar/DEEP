/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tugas_besar_uas;

/**
 *
 * @author kokon
 */
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

public class NewJFrame1 extends javax.swing.JFrame implements ActionListener {
    ImageProcessing imp;
    ImageIcon icon, icon2;
    Image img;
    BufferedImage imagedefault, image;
    int status = 0;
    /**
     * Creates new form NewJFrame1
     */
    JFileChooser fc;
    public NewJFrame1() {
        imp = new ImageProcessing();
        icon = new ImageIcon();
        icon2 = new ImageIcon();
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        Refresh = new javax.swing.JButton();
        zoom = new javax.swing.JButton();
        rotate = new javax.swing.JButton();
        gray = new javax.swing.JButton();
        bw = new javax.swing.JButton();
        rgbtoneg = new javax.swing.JButton();
        flip = new javax.swing.JButton();
        HSI = new javax.swing.JButton();
        filter = new javax.swing.JButton();
        Segmentation = new javax.swing.JButton();
        Sharpening = new javax.swing.JButton();
        Slicing = new javax.swing.JButton();
        Smoothing = new javax.swing.JButton();
        edge = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Label1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Label2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Mean = new javax.swing.JButton();
        saltpaper = new javax.swing.JButton();
        rotate90 = new javax.swing.JButton();
        filterslider = new javax.swing.JSlider();
        rotate_90 = new javax.swing.JButton();
        zoomin = new javax.swing.JButton();
        flipver = new javax.swing.JButton();
        slicing = new javax.swing.JButton();
        Modus = new javax.swing.JButton();
        noise = new javax.swing.JButton();
        zoomout = new javax.swing.JButton();
        fliphor = new javax.swing.JButton();
        Median = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        red = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        green = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        blue = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        huefilter = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        saturfilter = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        intensfilter = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        browse = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);

        jToolBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar1.setOrientation(1);
        jToolBar1.setRollover(true);
        jToolBar1.setEnabled(false);

        Refresh.setText("Refresh");
        Refresh.setFocusable(false);
        Refresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Refresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(Refresh);

        zoom.setText("Zoom");
        zoom.setToolTipText("");
        zoom.setFocusable(false);
        zoom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoomMouseClicked(evt);
            }
        });
        zoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomActionPerformed(evt);
            }
        });
        jToolBar1.add(zoom);

        rotate.setText("Rotate");
        rotate.setFocusable(false);
        rotate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateActionPerformed(evt);
            }
        });
        jToolBar1.add(rotate);

        gray.setText("Grayscale");
        gray.setFocusable(false);
        gray.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gray.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayActionPerformed(evt);
            }
        });
        jToolBar1.add(gray);

        bw.setText("Black & White");
        bw.setFocusable(false);
        bw.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bw.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwActionPerformed(evt);
            }
        });
        jToolBar1.add(bw);

        rgbtoneg.setText("RGB to Neg");
        rgbtoneg.setFocusable(false);
        rgbtoneg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rgbtoneg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rgbtoneg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbtonegActionPerformed(evt);
            }
        });
        jToolBar1.add(rgbtoneg);

        flip.setText("Flip");
        flip.setFocusable(false);
        flip.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flip.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipActionPerformed(evt);
            }
        });
        jToolBar1.add(flip);

        HSI.setText("HSI");
        HSI.setFocusable(false);
        HSI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HSI.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        HSI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HSIActionPerformed(evt);
            }
        });
        jToolBar1.add(HSI);

        filter.setText("Noise");
        filter.setFocusable(false);
        filter.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        filter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });
        jToolBar1.add(filter);

        Segmentation.setText("Segmentation");
        Segmentation.setFocusable(false);
        Segmentation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Segmentation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Segmentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SegmentationActionPerformed(evt);
            }
        });
        jToolBar1.add(Segmentation);

        Sharpening.setText("Sharpening");
        Sharpening.setFocusable(false);
        Sharpening.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Sharpening.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Sharpening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SharpeningActionPerformed(evt);
            }
        });
        jToolBar1.add(Sharpening);

        Slicing.setText("Slicing");
        Slicing.setFocusable(false);
        Slicing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Slicing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Slicing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SlicingActionPerformed(evt);
            }
        });
        jToolBar1.add(Slicing);

        Smoothing.setText("Smoothing");
        Smoothing.setFocusable(false);
        Smoothing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Smoothing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Smoothing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmoothingActionPerformed(evt);
            }
        });
        jToolBar1.add(Smoothing);

        edge.setText("Edge Detection");
        edge.setFocusable(false);
        edge.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        edge.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        edge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeActionPerformed(evt);
            }
        });
        jToolBar1.add(edge);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(Label1);
        Label1.getAccessibleContext().setAccessibleName("Label1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane2.setViewportView(Label2);
        Label2.getAccessibleContext().setAccessibleName("Label2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Mean.setText("Mean");
        Mean.setAlignmentX(0.5F);
        Mean.setEnabled(false);
        Mean.setFocusable(false);
        Mean.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Mean.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Mean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeanActionPerformed(evt);
            }
        });

        saltpaper.setText("Salt & Paper");
        saltpaper.setEnabled(false);
        saltpaper.setFocusable(false);
        saltpaper.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saltpaper.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saltpaper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saltpaperActionPerformed(evt);
            }
        });

        rotate90.setText("Rotate 90o");
        rotate90.setEnabled(false);
        rotate90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90ActionPerformed(evt);
            }
        });

        filterslider.setMaximum(255);
        filterslider.setEnabled(false);
        filterslider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filtersliderStateChanged(evt);
            }
        });

        rotate_90.setText("Rotate -90o");
        rotate_90.setEnabled(false);
        rotate_90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate_90ActionPerformed(evt);
            }
        });

        zoomin.setText("Zoom In");
        zoomin.setEnabled(false);
        zoomin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoominActionPerformed(evt);
            }
        });

        flipver.setText("Flip Vertikal");
        flipver.setEnabled(false);
        flipver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipverActionPerformed(evt);
            }
        });

        slicing.setText("Color Slicing");
        slicing.setEnabled(false);
        slicing.setFocusable(false);
        slicing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        slicing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        slicing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slicingActionPerformed(evt);
            }
        });

        Modus.setText("Modus");
        Modus.setAlignmentX(0.5F);
        Modus.setEnabled(false);
        Modus.setFocusable(false);
        Modus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Modus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Modus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModusActionPerformed(evt);
            }
        });

        noise.setText("Gaussian");
        noise.setEnabled(false);
        noise.setFocusable(false);
        noise.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        noise.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        noise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noiseActionPerformed(evt);
            }
        });

        zoomout.setText("Zoom Out");
        zoomout.setEnabled(false);
        zoomout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomoutActionPerformed(evt);
            }
        });

        fliphor.setText("Flip Horizontal");
        fliphor.setEnabled(false);
        fliphor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fliphorActionPerformed(evt);
            }
        });

        Median.setText("Median");
        Median.setAlignmentX(0.5F);
        Median.setEnabled(false);
        Median.setFocusable(false);
        Median.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Median.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Median.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedianActionPerformed(evt);
            }
        });

        jLabel4.setText("R:");

        red.setEnabled(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(red, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(red, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setText("G:");

        green.setEnabled(false);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(green, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(green, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setText("B:");

        blue.setEnabled(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(blue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(slicing))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(noise)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saltpaper))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Mean)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Modus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Median))
                    .addComponent(filterslider, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rotate90)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rotate_90))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(fliphor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flipver))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(zoomin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomout)))
                .addContainerGap(460, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zoomin)
                            .addComponent(zoomout))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(slicing)
                        .addGap(2, 2, 2)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotate90)
                    .addComponent(rotate_90))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(fliphor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(flipver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Median)
                    .addComponent(Modus)
                    .addComponent(Mean))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noise, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saltpaper, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterslider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        filterslider.getAccessibleContext().setAccessibleName("filterslider");

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        huefilter.setMajorTickSpacing(360);
        huefilter.setMaximum(360);
        huefilter.setMinorTickSpacing(360);
        huefilter.setPaintLabels(true);
        huefilter.setValue(0);
        huefilter.setEnabled(false);
        huefilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                huefilterStateChanged(evt);
            }
        });

        jLabel1.setText("Hue");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(huefilter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(huefilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        saturfilter.setMajorTickSpacing(100);
        saturfilter.setMinorTickSpacing(100);
        saturfilter.setPaintLabels(true);
        saturfilter.setValue(100);
        saturfilter.setEnabled(false);
        saturfilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturfilterStateChanged(evt);
            }
        });

        jLabel2.setText("Saturation");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saturfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saturfilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        saturfilter.getAccessibleContext().setAccessibleName("saturfilter");

        intensfilter.setMajorTickSpacing(100);
        intensfilter.setMinorTickSpacing(100);
        intensfilter.setPaintLabels(true);
        intensfilter.setEnabled(false);
        intensfilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                intensfilterStateChanged(evt);
            }
        });

        jLabel3.setText("Intensity");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(intensfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(intensfilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        browse.setText("Browse...");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browse)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(true);
        zoomout.setEnabled(true);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
    }//GEN-LAST:event_zoomActionPerformed

    private void zoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomMouseClicked
        // TODO add your handling code here:
        zoomin.setVisible(true);
        zoomin.enable(true);
    }//GEN-LAST:event_zoomMouseClicked

    private void rotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateActionPerformed
        // TODO add your handling code here:
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(true);
        rotate_90.setEnabled(true);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
    }//GEN-LAST:event_rotateActionPerformed

    private void flipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(true);
        flipver.setEnabled(true);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
    }//GEN-LAST:event_flipActionPerformed

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(true);
        saltpaper.setEnabled(true);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
    }//GEN-LAST:event_filterActionPerformed

    private void grayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        
         try {
            image = imp.rgbToGrayscale(image);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_grayActionPerformed

    private void bwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwActionPerformed
        // TODO add your handling code here:
        status = 2;
        filterslider.setMinimum(0);
        filterslider.setMaximum(255);
        filterslider.setValue(127);
        filterslider.setMajorTickSpacing(255);
        filterslider.setMinorTickSpacing(255);
        filterslider.setPaintLabels(true);
        
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(true);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        
        try {
            image = imp.rgbToBW(image, 127);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_bwActionPerformed

    private void rgbtonegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbtonegActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        
        try {
            image = imp.rgbToNegative(image);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_rgbtonegActionPerformed

    private void HSIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HSIActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        huefilter.setEnabled(true);
        saturfilter.setEnabled(true);
        intensfilter.setEnabled(true);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        
        image = imp.huetoRGB(imagedefault, huefilter.getValue(), saturfilter.getValue(), intensfilter.getValue());
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
        
    }//GEN-LAST:event_HSIActionPerformed

    private void SegmentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SegmentationActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        image = imp.segmentation(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setSize(Label2.getPreferredSize());
    }//GEN-LAST:event_SegmentationActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        //FileChooserDemo.createAndShowGUI();
        fc = new JFileChooser();
        if (evt.getSource() == browse) {
            int returnVal = fc.showOpenDialog(NewJFrame1.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                try {
                    image = ImageIO.read(file);
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
                }
                //This is where a real application would open the file.
                imagedefault = image;
                icon.setImage(image);
                icon2.setImage(image);
                if(icon != null){
                    Label1.setIcon(icon);
                    Label1.setText(null);
                    Label2.setIcon(icon2);
                    Label2.setText(null);
                } else {
                    Label1.setText("Image not found");
                    Label1.setIcon(null);
                    Label2.setText("Image not found");
                    Label2.setIcon(null);
                }
            }
        //Handle save button action.
        } 
    }//GEN-LAST:event_browseActionPerformed

    private void SlicingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SlicingActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(true);
        red.setEnabled(true);
        green.setEnabled(true);
        blue.setEnabled(true);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
    }//GEN-LAST:event_SlicingActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        image = imagedefault;
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setSize(Label2.getPreferredSize());
    }//GEN-LAST:event_RefreshActionPerformed

    private void SmoothingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmoothingActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        Mean.setEnabled(true);
        Modus.setEnabled(true);
        Median.setEnabled(true);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
    }//GEN-LAST:event_SmoothingActionPerformed

    private void fliphorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fliphorActionPerformed
        // TODO add your handling code here:
        image = imp.flipHorizontal(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);

    }//GEN-LAST:event_fliphorActionPerformed

    private void zoomoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomoutActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            image = imp.zoomOut(image);
            icon2.setImage(image);
            Label2.setIcon(icon2);
            Label2.setText(null);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_zoomoutActionPerformed

    private void flipverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipverActionPerformed
        // TODO add your handling code here:
        image = imp.flipVertical(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_flipverActionPerformed

    private void zoominActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoominActionPerformed
        try {
            // TODO add your handling code here:
            image = imp.zoomIn(image);
            icon2.setImage(image);
            Label2.setIcon(icon2);
            Label2.setText(null);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_zoominActionPerformed

    private void rotate_90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate_90ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            image = imp.rotate270(image);
            icon2.setImage(image);
            Label2.setIcon(icon2);
            Label2.setText(null);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rotate_90ActionPerformed

    private void rotate90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90ActionPerformed
        // TODO add your handling code here:
        try {
            image = imp.rotate90(image);
            icon2.setImage(image);
            Label2.setIcon(icon2);
            Label2.setText(null);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rotate90ActionPerformed

    private void saltpaperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saltpaperActionPerformed
        // TODO add your handling code here:
        image = imp.saltPaper(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_saltpaperActionPerformed

    private void MeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeanActionPerformed
        // TODO add your handling code here:
        image = imp.smoothingMean3x3(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_MeanActionPerformed

    private void ModusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModusActionPerformed
        // TODO add your handling code here:
        image = imp.smoothingModus3x3(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_ModusActionPerformed

    private void MedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedianActionPerformed
        // TODO add your handling code here:
        image = imp.smoothingMedian3x3(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_MedianActionPerformed

    private void filtersliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filtersliderStateChanged
        if(status == 2){
            try {
                // TODO add your handling code here:
                image = imp.rgbToBW(imagedefault, filterslider.getValue());
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
            }
            icon2.setImage(image);
            Label2.setIcon(icon2);
            Label2.setText(null);
        }
        
    }//GEN-LAST:event_filtersliderStateChanged

    private void SharpeningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SharpeningActionPerformed
        // TODO add your handling code here:zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        image = imp.sharpeningLaplacian(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_SharpeningActionPerformed

    private void huefilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_huefilterStateChanged
        // TODO add your handling code here:
        image = imp.huetoRGB(imagedefault, huefilter.getValue(), saturfilter.getValue(), intensfilter.getValue());
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_huefilterStateChanged

    private void saturfilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturfilterStateChanged
        // TODO add your handling code here:
        image = imp.huetoRGB(imagedefault, huefilter.getValue(), saturfilter.getValue(), intensfilter.getValue());
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_saturfilterStateChanged

    private void intensfilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_intensfilterStateChanged
        // TODO add your handling code here:
        image = imp.huetoRGB(imagedefault, huefilter.getValue(), saturfilter.getValue(), intensfilter.getValue());
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_intensfilterStateChanged

    private void slicingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slicingActionPerformed
        // TODO add your handling code here:
        int r, g, b;
        r = Integer.parseInt(red.getText());
        g = Integer.parseInt(green.getText());
        b = Integer.parseInt(blue.getText());
        image = imp.colorSlicing(image, r, g, b);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_slicingActionPerformed

    private void noiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noiseActionPerformed
        // TODO add your handling code here:
        image = imp.gaussian(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_noiseActionPerformed

    private void edgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeActionPerformed
        // TODO add your handling code here:
        zoomin.setEnabled(false);
        zoomout.setEnabled(false);
        rotate90.setEnabled(false);
        rotate_90.setEnabled(false);
        fliphor.setEnabled(false);
        flipver.setEnabled(false);
        noise.setEnabled(false);
        saltpaper.setEnabled(false);
        filterslider.setEnabled(false);
        slicing.setEnabled(false);
        red.setEnabled(false);
        green.setEnabled(false);
        blue.setEnabled(false);
        Mean.setEnabled(false);
        Modus.setEnabled(false);
        Median.setEnabled(false);
        huefilter.setEnabled(false);
        saturfilter.setEnabled(false);
        intensfilter.setEnabled(false);
        
        image = imp.edgeDetection(image);
        icon2.setImage(image);
        Label2.setIcon(icon2);
        Label2.setText(null);
    }//GEN-LAST:event_edgeActionPerformed
    protected static ImageIcon createImageIcon(String path) {
        URL imgURL;
        imgURL =NewJFrame1.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            return null;
        }
    }
    

    /** Returns an ImageIcon, or null if the path was invalid. */
    
     /* @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            
                
            @Override
            public void run() {
                JSlider slider= new JSlider(0,100,0);
                new NewJFrame1().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HSI;
    private javax.swing.JLabel Label1;
    private javax.swing.JLabel Label2;
    private javax.swing.JButton Mean;
    private javax.swing.JButton Median;
    private javax.swing.JButton Modus;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Segmentation;
    private javax.swing.JButton Sharpening;
    private javax.swing.JButton Slicing;
    private javax.swing.JButton Smoothing;
    private javax.swing.JTextField blue;
    private javax.swing.JButton browse;
    private javax.swing.JButton bw;
    private javax.swing.JButton edge;
    private javax.swing.JButton filter;
    private javax.swing.JSlider filterslider;
    private javax.swing.JButton flip;
    private javax.swing.JButton fliphor;
    private javax.swing.JButton flipver;
    private javax.swing.JButton gray;
    private javax.swing.JTextField green;
    private javax.swing.JSlider huefilter;
    private javax.swing.JSlider intensfilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton noise;
    private javax.swing.JTextField red;
    private javax.swing.JButton rgbtoneg;
    private javax.swing.JButton rotate;
    private javax.swing.JButton rotate90;
    private javax.swing.JButton rotate_90;
    private javax.swing.JButton saltpaper;
    private javax.swing.JSlider saturfilter;
    private javax.swing.JButton slicing;
    private javax.swing.JButton zoom;
    private javax.swing.JButton zoomin;
    private javax.swing.JButton zoomout;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
